EXERCITIU 1
--------------------------------a)

CREATE SEQUENCE employee_id_secventa
    INCREMENT BY 10
    START  WITH 10
    MAXVALUE 100;

CREATE OR REPLACE PACKAGE pachet1 AS
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE) 
    RETURN NUMBER;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    END pachet1;
/
CREATE OR REPLACE PACKAGE BODY pachet1 IS 
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN NUMBER is 
    salariu employees.salary%TYPE;
    BEGIN
        SELECT MIN(salary) 
        INTO salariu 
        FROM employees 
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN salariu;    --10
    END salariu_adaugare;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER IS 
    id_manager employees.manager_id%TYPE;
    BEGIN
        SELECT employee_id 
        INTO id_manager 
        FROM employees 
        WHERE first_name = nume AND last_name = prenume;
        RETURN id_manager;
    END id_manager_adaugare;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER IS
    id_department departments.department_id%TYPE;   --24
    BEGIN
        SELECT department_id
        INTO id_department
        FROM departments 
        WHERE department_name = nume_dep;
        RETURN id_department;
    END id_department_adaugare;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER is
        id_job jobs.job_id%TYPE;
    BEGIN
        SELECT job_id
        INTO id_job
        FROM jobs
        WHERE job_title = nume_job;
        RETURN id_job;         --40
    END id_job_adaugare;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%type, nume_job jobs.job_title%TYPE)
    IS 
        salariu employees.salary%TYPE;
        id_manager employees.employee_id%TYPE; 
        id_department departments.department_id%TYPE;
        id_job jobs.job_title%TYPE;
    BEGIN      --50
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu := salariu_adaugare(id_department, id_job); 
        INSERT INTO employees VALUES (
            employee_id_secventa.NEXTVAL,
            nume, 
            prenume, 
            email, 
            telefon, 
            sysdate,
            id_job,
            salariu, 
            0,
            id_manager,
            id_department);
    END angajat_adaugare; 
END pachet1;

-----------------------------------b)

CREATE OR REPLACE PACKAGE pachet1 AS
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE) 
    RETURN NUMBER;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%TYPE, nume_manager employees.last_name%TYPE, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
END pachet1;
/
CREATE OR REPLACE PACKAGE BODY pachet1 IS 
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN NUMBER is 
    salariu employees.salary%TYPE;
    BEGIN
        SELECT MIN(salary) 
        INTO salariu 
        FROM employees 
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN salariu;    --10
    END salariu_adaugare;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER IS 
    id_manager employees.manager_id%TYPE;
    BEGIN
        SELECT employee_id 
        INTO id_manager 
        FROM employees 
        WHERE first_name = nume AND last_name = prenume;
        RETURN id_manager;
    END id_manager_adaugare;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER IS
    id_department departments.department_id%TYPE;   --24
    BEGIN
        SELECT department_id
        INTO id_department
        FROM departments 
        WHERE department_name = nume_dep;
        RETURN id_department;
    END id_department_adaugare;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER is
        id_job jobs.job_id%TYPE;
    BEGIN
        SELECT job_id
        INTO id_job
        FROM jobs
        WHERE job_title = nume_job;
        RETURN id_job;         --40
    END id_job_adaugare;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%type, nume_job jobs.job_title%TYPE)
    IS 
        salariu employees.salary%TYPE;
        id_manager employees.employee_id%TYPE; 
        id_department departments.department_id%TYPE;
        id_job jobs.job_title%TYPE;
    BEGIN      --50
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu := salariu_adaugare(id_department, id_job); 
        INSERT INTO employees VALUES (
            employee_id_secventa.NEXTVAL,
            nume, 
            prenume, 
            email, 
            telefon, 
            sysdate,
            id_job,
            salariu, 
            0,
            id_manager,
            id_department);
    END angajat_adaugare;
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE IS
    comision   employees.commission_pct%TYPE;   --70
    BEGIN
        SELECT min(commission_pct)
        INTO comision 
        FROM employees
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN comision;
    END comision_adaugare;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%TYPE,nume_manager employees.last_name%TYPE, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE)
    IS                                                                      --80
    id_angajat employees.employee_id%TYPE;
    salariu_dep_nou employees.salary%TYPE;
    salariu_dep_vechi employees.salary%TYPE;
    comision employees.commission_pct%type;
    id_manager employees.employee_id%TYPE; 
    id_department departments.department_id%TYPE;
    id_job jobs.job_title%TYPE;
    BEGIN 
        SELECT salary, employee_id
        INTO salariu_dep_vechi, id_angajat    --90
        FROM employees
        WHERE last_name = nume AND first_name = prenume;
        
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu_dep_nou :=salariu_adaugare(id_department,id_job);
        comision := comision_adaugare(id_department, id_job);
        
        IF salariu_dep_nou > salariu_dep_vechi THEN    --100
            salariu_dep_nou := salariu_dep_vechi;
        END IF;
        UPDATE employees 
        SET hire_date = sysdate, job_id = id_job, salary = salariu_dep_nou, commission_pct = comision, manager_id = id_manager, department_id = id_department
        WHERE employee_id = id_angajat;
    END angajat_mutare;
END pachet1;

-----------------------------c)

CREATE OR REPLACE PACKAGE pachet1 AS
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE) 
    RETURN NUMBER;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%TYPE, nume_manager employees.last_name%TYPE, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION nr_subalterni(nume employees.last_name%type, prenume employees.first_name%type)
    RETURN NUMBER;
END pachet1;
/
CREATE OR REPLACE PACKAGE BODY pachet1 IS 
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN NUMBER is 
    salariu employees.salary%TYPE;
    BEGIN
        SELECT MIN(salary) 
        INTO salariu 
        FROM employees 
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN salariu;    --10
    END salariu_adaugare;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER IS 
    id_manager employees.manager_id%TYPE;
    BEGIN
        SELECT employee_id 
        INTO id_manager 
        FROM employees 
        WHERE first_name = nume AND last_name = prenume;
        RETURN id_manager;
    END id_manager_adaugare;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER IS
    id_department departments.department_id%TYPE;   --24
    BEGIN
        SELECT department_id
        INTO id_department
        FROM departments 
        WHERE department_name = nume_dep;
        RETURN id_department;
    END id_department_adaugare;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER is
        id_job jobs.job_id%TYPE;
    BEGIN
        SELECT job_id
        INTO id_job
        FROM jobs
        WHERE job_title = nume_job;
        RETURN id_job;         --40
    END id_job_adaugare;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%type, nume_job jobs.job_title%TYPE)
    IS 
        salariu employees.salary%TYPE;
        id_manager employees.employee_id%TYPE; 
        id_department departments.department_id%TYPE;
        id_job jobs.job_title%TYPE;
    BEGIN      --50
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu := salariu_adaugare(id_department, id_job); 
        INSERT INTO employees VALUES (
            employee_id_secventa.NEXTVAL,
            nume, 
            prenume, 
            email, 
            telefon, 
            sysdate,
            id_job,
            salariu, 
            0,
            id_manager,
            id_department);
    END angajat_adaugare;
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE IS
    comision   employees.commission_pct%TYPE;   --70
    BEGIN
        SELECT min(commission_pct)
        INTO comision 
        FROM employees
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN comision;
    END comision_adaugare;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%TYPE,nume_manager employees.last_name%TYPE, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE)
    IS                                                                      --80
    id_angajat employees.employee_id%TYPE;
    salariu_dep_nou employees.salary%TYPE;
    salariu_dep_vechi employees.salary%TYPE;
    comision employees.commission_pct%type;
    id_manager employees.employee_id%TYPE; 
    id_department departments.department_id%TYPE;
    id_job jobs.job_title%TYPE;
    BEGIN 
        SELECT salary, employee_id
        INTO salariu_dep_vechi, id_angajat    --90
        FROM employees
        WHERE last_name = nume AND first_name = prenume;
        
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu_dep_nou :=salariu_adaugare(id_department,id_job);
        comision := comision_adaugare(id_department, id_job);
        
        IF salariu_dep_nou > salariu_dep_vechi THEN    --100
            salariu_dep_nou := salariu_dep_vechi;
        END IF;
        UPDATE employees 
        SET hire_date = sysdate, job_id = id_job, salary = salariu_dep_nou, commission_pct = comision, manager_id = id_manager, department_id = id_department
        WHERE employee_id = id_angajat;
    END angajat_mutare;
    FUNCTION nr_subalterni(nume employees.last_name%type, prenume employees.first_name%type)
    RETURN NUMBER IS
    nr NUMBER; 
    BEGIN
        SELECT COUNT(*)
        INTO nr 
        FROM employees e
        JOIN employees m ON e.manager_id = m.employee_id
        WHERE m.first_name = prenume AND m.last_name = nume;
       
        RETURN nr;
    END nr_subalterni;
    
END pachet1;

----------------------------d)

CREATE OR REPLACE PACKAGE pachet1 AS
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE) 
    RETURN NUMBER;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%type, nume_manager employees.last_name%type, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION nr_subalterni(nume employees.last_name%TYPE, prenume employees.first_name%TYPE)
    RETURN NUMBER;
    PROCEDURE promovare(id_angajat employees.employee_id%TYPE);
END pachet1;
/
CREATE OR REPLACE PACKAGE BODY pachet1 IS 
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN NUMBER is 
    salariu employees.salary%TYPE;
    BEGIN
        SELECT MIN(salary) 
        INTO salariu 
        FROM employees 
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN salariu;    --10
    END salariu_adaugare;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER IS 
    id_manager employees.manager_id%TYPE;
    BEGIN
        SELECT employee_id 
        INTO id_manager 
        FROM employees 
        WHERE first_name = nume AND last_name = prenume;
        RETURN id_manager;
    END id_manager_adaugare;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER IS
    id_department departments.department_id%TYPE;   --24
    BEGIN
        SELECT department_id
        INTO id_department
        FROM departments 
        WHERE department_name = nume_dep;
        RETURN id_department;
    END id_department_adaugare;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER is
        id_job jobs.job_id%TYPE;
    BEGIN
        SELECT job_id
        INTO id_job
        FROM jobs
        WHERE job_title = nume_job;
        RETURN id_job;         --40
    END id_job_adaugare;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%type, nume_job jobs.job_title%TYPE)
    IS 
        salariu employees.salary%TYPE;
        id_manager employees.employee_id%TYPE; 
        id_department departments.department_id%TYPE;
        id_job jobs.job_title%TYPE;
    BEGIN      --50
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu := salariu_adaugare(id_department, id_job); 
        INSERT INTO employees VALUES (
            employee_id_secventa.NEXTVAL,
            nume, 
            prenume, 
            email, 
            telefon, 
            sysdate,
            id_job,
            salariu, 
            0,
            id_manager,
            id_department);
    END angajat_adaugare;
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE IS
    comision   employees.commission_pct%TYPE;   --70
    BEGIN
        SELECT min(commission_pct)
        INTO comision 
        FROM employees
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN comision;
    END comision_adaugare;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%type,nume_manager employees.last_name%type, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE)
    IS                                                                      --80
    id_angajat employees.employee_id%TYPE;
    salariu_dep_nou employees.salary%TYPE;
    salariu_dep_vechi employees.salary%TYPE;
    comision employees.commission_pct%type;
    id_manager employees.employee_id%TYPE; 
    id_department departments.department_id%TYPE;
    id_job jobs.job_title%TYPE;
    BEGIN 
        SELECT salary, employee_id
        INTO salariu_dep_vechi, id_angajat    --90
        FROM employees
        WHERE last_name = nume AND first_name = prenume;
        
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu_dep_nou :=salariu_adaugare(id_department,id_job);
        comision := comision_adaugare(id_department, id_job);
        
        IF salariu_dep_nou > salariu_dep_vechi THEN    --100
            salariu_dep_nou := salariu_dep_vechi;
        END IF;
        UPDATE employees 
        SET hire_date = sysdate, job_id = id_job, salary = salariu_dep_nou, commission_pct = comision, manager_id = id_manager, department_id = id_department
        WHERE employee_id = id_angajat;
    END angajat_mutare;
    FUNCTION nr_subalterni(nume employees.last_name%TYPE, prenume employees.first_name%TYPE)
    RETURN NUMBER IS
    nr NUMBER; 
    BEGIN
        SELECT COUNT(*)                         --doar directi
        INTO nr 
        FROM employees e
        JOIN employees m ON e.manager_id = m.employee_id
        WHERE m.first_name = prenume AND m.last_name = nume;
       
        RETURN nr;
    END nr_subalterni;
    PROCEDURE promovare(id_angajat employees.employee_id%TYPE) IS
    id_primul_manager employees.manager_id%TYPE;
    id_managerul_managerului employees.manager_id%TYPE;
    BEGIN
        SELECT manager_id
        INTO id_primul_manager
        FROM employees
        WHERE employee_id = id_angajat;
        
        SELECT manager_id
        INTO id_managerul_managerului
        FROM employees
        WHERE employee_id = id_primul_manager;
       
        UPDATE employees
        SET manager_id = id_managerul_managerului
        WHERE employee_id = id_angajat;  
    END promovare;
    
END pachet1;

--------------------------------e)

CREATE OR REPLACE PACKAGE pachet1 AS
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE) 
    RETURN NUMBER;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%type, nume_manager employees.last_name%type, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION nr_subalterni(nume employees.last_name%TYPE, prenume employees.first_name%TYPE)
    RETURN NUMBER;
    PROCEDURE promovare(id_angajat employees.employee_id%TYPE);
    PROCEDURE salariu_actualizare(salariu_nou employees.salary%TYPE, nume employees.first_name%TYPE);
END pachet1;
/
CREATE OR REPLACE PACKAGE BODY pachet1 IS 
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN NUMBER is 
    salariu employees.salary%TYPE;
    BEGIN
        SELECT MIN(salary) 
        INTO salariu 
        FROM employees 
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN salariu;    --10
    END salariu_adaugare;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER IS 
    id_manager employees.manager_id%TYPE;
    BEGIN
        SELECT employee_id 
        INTO id_manager 
        FROM employees 
        WHERE first_name = nume AND last_name = prenume;
        RETURN id_manager;
    END id_manager_adaugare;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER IS
    id_department departments.department_id%TYPE;   --24
    BEGIN
        SELECT department_id
        INTO id_department
        FROM departments 
        WHERE department_name = nume_dep;
        RETURN id_department;
    END id_department_adaugare;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER is
        id_job jobs.job_id%TYPE;
    BEGIN
        SELECT job_id
        INTO id_job
        FROM jobs
        WHERE job_title = nume_job;
        RETURN id_job;         --40
    END id_job_adaugare;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%type, nume_job jobs.job_title%TYPE)
    IS 
        salariu employees.salary%TYPE;
        id_manager employees.employee_id%TYPE; 
        id_department departments.department_id%TYPE;
        id_job jobs.job_title%TYPE;
    BEGIN      --50
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu := salariu_adaugare(id_department, id_job); 
        INSERT INTO employees VALUES (
            employee_id_secventa.NEXTVAL,
            nume, 
            prenume, 
            email, 
            telefon, 
            sysdate,
            id_job,
            salariu, 
            0,
            id_manager,
            id_department);
    END angajat_adaugare;
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE IS
    comision   employees.commission_pct%TYPE;   --70
    BEGIN
        SELECT min(commission_pct)
        INTO comision 
        FROM employees
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN comision;
    END comision_adaugare;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%type,nume_manager employees.last_name%type, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE)
    IS                                                                      --80
    id_angajat employees.employee_id%TYPE;
    salariu_dep_nou employees.salary%TYPE;
    salariu_dep_vechi employees.salary%TYPE;
    comision employees.commission_pct%type;
    id_manager employees.employee_id%TYPE; 
    id_department departments.department_id%TYPE;
    id_job jobs.job_title%TYPE;
    BEGIN 
        SELECT salary, employee_id
        INTO salariu_dep_vechi, id_angajat    --90
        FROM employees
        WHERE last_name = nume AND first_name = prenume;
        
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu_dep_nou :=salariu_adaugare(id_department,id_job);
        comision := comision_adaugare(id_department, id_job);
        
        IF salariu_dep_nou > salariu_dep_vechi THEN    --100
            salariu_dep_nou := salariu_dep_vechi;
        END IF;
        UPDATE employees 
        SET hire_date = sysdate, job_id = id_job, salary = salariu_dep_nou, commission_pct = comision, manager_id = id_manager, department_id = id_department
        WHERE employee_id = id_angajat;
    END angajat_mutare;
    FUNCTION nr_subalterni(nume employees.last_name%TYPE, prenume employees.first_name%TYPE)
    RETURN NUMBER IS
    nr NUMBER; 
    BEGIN
        SELECT COUNT(*)                         --doar directi
        INTO nr 
        FROM employees e
        JOIN employees m ON e.manager_id = m.employee_id
        WHERE m.first_name = prenume AND m.last_name = nume;
       
        RETURN nr;
    END nr_subalterni;
    PROCEDURE promovare(id_angajat employees.employee_id%TYPE) IS
    id_primul_manager employees.manager_id%TYPE;
    id_managerul_managerului employees.manager_id%TYPE;
    BEGIN
        SELECT manager_id
        INTO id_primul_manager
        FROM employees
        WHERE employee_id = id_angajat;
        
        SELECT manager_id
        INTO id_managerul_managerului
        FROM employees
        WHERE employee_id = id_primul_manager;
       
        UPDATE employees
        SET manager_id = id_managerul_managerului
        WHERE employee_id = id_angajat;  
    END promovare;
    PROCEDURE salariu_actualizare(salariu_nou employees.salary%TYPE, nume employees.first_name%TYPE)
    IS 
    nr NUMBER; 
    BEGIN
        SELECT COUNT(*)
        INTO nr
        FROM employees
        WHERE first_name = nume; 
        IF nr = 0 THEN
            dbms_output.put_line('Nu exista angajati');
        ELSIF NR>1 THEN
            dbms_output.put_line('Exista mai multi angajati');
        ELSE  
            UPDATE employees
            SET salary = salariu_nou
            WHERE first_name = nume; 
        END IF;
    END salariu_actualizare;
END pachet1;

----------------------------------f)

CREATE OR REPLACE PACKAGE pachet1 AS
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE) 
    RETURN NUMBER;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%type, nume_manager employees.last_name%type, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION nr_subalterni(nume employees.last_name%TYPE, prenume employees.first_name%TYPE)
    RETURN NUMBER;
    PROCEDURE promovare(id_angajat employees.employee_id%TYPE);
    PROCEDURE salariu_actualizare(salariu_nou employees.salary%TYPE, nume employees.first_name%TYPE);
    CURSOR lista_angajati(id_job employees.job_id%type) IS
        SELECT *
        FROM employees
        WHERE job_id=id_job;
END pachet1;
/
-- body-ul este la fel

-----------------------------g)

CREATE OR REPLACE PACKAGE pachet1 AS
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE) 
    RETURN NUMBER;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%type, nume_manager employees.last_name%type, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION nr_subalterni(nume employees.last_name%TYPE, prenume employees.first_name%TYPE)
    RETURN NUMBER;
    PROCEDURE promovare(id_angajat employees.employee_id%TYPE);
    PROCEDURE salariu_actualizare(salariu_nou employees.salary%TYPE, nume employees.first_name%TYPE);
    CURSOR lista_angajati(id_job employees.job_id%type) IS
        SELECT *
        FROM employees
        WHERE job_id=id_job;
    CURSOR lista_joburi IS
        SELECT *
        FROM jobs;
END pachet1;
/

-- body-ul este la fel

-----------------------------------h)

CREATE OR REPLACE PACKAGE pachet1 AS
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE) 
    RETURN NUMBER;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%type, nume_manager employees.last_name%type, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE);
    FUNCTION nr_subalterni(nume employees.last_name%TYPE, prenume employees.first_name%TYPE)
    RETURN NUMBER;
    PROCEDURE promovare(id_angajat employees.employee_id%TYPE);
    PROCEDURE salariu_actualizare(salariu_nou employees.salary%TYPE, nume employees.first_name%TYPE);
    CURSOR lista_angajati(id_job employees.job_id%type) IS
        SELECT *
        FROM employees
        WHERE job_id=id_job;
    CURSOR lista_joburi IS
        SELECT *
        FROM jobs;
    PROCEDURE afisare;
END pachet1;
/
CREATE OR REPLACE PACKAGE BODY pachet1 IS 
    FUNCTION salariu_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN NUMBER is 
    salariu employees.salary%TYPE;
    BEGIN
        SELECT MIN(salary) 
        INTO salariu 
        FROM employees 
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN salariu;    --10
    END salariu_adaugare;
    FUNCTION id_manager_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE) 
    RETURN NUMBER IS 
    id_manager employees.manager_id%TYPE;
    BEGIN
        SELECT employee_id 
        INTO id_manager 
        FROM employees 
        WHERE first_name = nume AND last_name = prenume;
        RETURN id_manager;
    END id_manager_adaugare;
    FUNCTION id_department_adaugare(nume_dep departments.department_name%TYPE) 
    RETURN NUMBER IS
    id_department departments.department_id%TYPE;   --24
    BEGIN
        SELECT department_id
        INTO id_department
        FROM departments 
        WHERE department_name = nume_dep;
        RETURN id_department;
    END id_department_adaugare;
    FUNCTION id_job_adaugare(nume_job jobs.job_title%TYPE) 
    RETURN NUMBER is
        id_job jobs.job_id%TYPE;
    BEGIN
        SELECT job_id
        INTO id_job
        FROM jobs
        WHERE job_title = nume_job;
        RETURN id_job;         --40
    END id_job_adaugare;
    PROCEDURE angajat_adaugare(nume employees.first_name%TYPE, prenume employees.last_name%TYPE, telefon employees.phone_number%TYPE, email employees.email%TYPE, 
                            nume_manager employees.last_name%TYPE, prenume_manager employees.last_name%TYPE,
                            nume_dep departments.department_name%type, nume_job jobs.job_title%TYPE)
    IS 
        salariu employees.salary%TYPE;
        id_manager employees.employee_id%TYPE; 
        id_department departments.department_id%TYPE;
        id_job jobs.job_title%TYPE;
    BEGIN      --50
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu := salariu_adaugare(id_department, id_job); 
        INSERT INTO employees VALUES (
            employee_id_secventa.NEXTVAL,
            nume, 
            prenume, 
            email, 
            telefon, 
            sysdate,
            id_job,
            salariu, 
            0,
            id_manager,
            id_department);
    END angajat_adaugare;
    FUNCTION comision_adaugare(id_dep employees.department_id%TYPE, id_job employees.job_id%TYPE)
    RETURN employees.commission_pct%TYPE IS
    comision   employees.commission_pct%TYPE;   --70
    BEGIN
        SELECT min(commission_pct)
        INTO comision 
        FROM employees
        WHERE department_id = id_dep AND job_id = id_job;
        RETURN comision;
    END comision_adaugare;
    PROCEDURE angajat_mutare(nume employees.last_name%TYPE, prenume employees.last_name%type,nume_manager employees.last_name%type, 
                       prenume_manager employees.last_name%TYPE, nume_dep departments.department_name%TYPE, nume_job jobs.job_title%TYPE)
    IS                                                                      --80
    id_angajat employees.employee_id%TYPE;
    salariu_dep_nou employees.salary%TYPE;
    salariu_dep_vechi employees.salary%TYPE;
    comision employees.commission_pct%type;
    id_manager employees.employee_id%TYPE; 
    id_department departments.department_id%TYPE;
    id_job jobs.job_title%TYPE;
    BEGIN 
        SELECT salary, employee_id
        INTO salariu_dep_vechi, id_angajat    --90
        FROM employees
        WHERE last_name = nume AND first_name = prenume;
        
        id_manager := id_manager_adaugare(nume_manager, prenume_manager);
        id_department := id_department_adaugare(nume_dep);
        id_job := id_job_adaugare(nume_job);
        salariu_dep_nou :=salariu_adaugare(id_department,id_job);
        comision := comision_adaugare(id_department, id_job);
        
        IF salariu_dep_nou > salariu_dep_vechi THEN    --100
            salariu_dep_nou := salariu_dep_vechi;
        END IF;
        UPDATE employees 
        SET hire_date = sysdate, job_id = id_job, salary = salariu_dep_nou, commission_pct = comision, manager_id = id_manager, department_id = id_department
        WHERE employee_id = id_angajat;
    END angajat_mutare;
    FUNCTION nr_subalterni(nume employees.last_name%TYPE, prenume employees.first_name%TYPE)
    RETURN NUMBER IS
    nr NUMBER; 
    BEGIN
        SELECT COUNT(*)                         --doar directi
        INTO nr 
        FROM employees e
        JOIN employees m ON e.manager_id = m.employee_id
        WHERE m.first_name = prenume AND m.last_name = nume;
       
        RETURN nr;
    END nr_subalterni;
    PROCEDURE promovare(id_angajat employees.employee_id%TYPE) IS
    id_primul_manager employees.manager_id%TYPE;
    id_managerul_managerului employees.manager_id%TYPE;
    BEGIN
        SELECT manager_id
        INTO id_primul_manager
        FROM employees
        WHERE employee_id = id_angajat;
        
        SELECT manager_id
        INTO id_managerul_managerului
        FROM employees                                    --130
        WHERE employee_id = id_primul_manager;
       
        UPDATE employees
        SET manager_id = id_managerul_managerului
        WHERE employee_id = id_angajat;  
    END promovare;
    PROCEDURE salariu_actualizare(salariu_nou employees.salary%TYPE, nume employees.first_name%TYPE)
    IS 
    nr NUMBER; 
    BEGIN                                               --140
        SELECT COUNT(*)
        INTO nr
        FROM employees
        WHERE first_name = nume; 
        IF nr = 0 THEN
            dbms_output.put_line('Nu exista angajati');
        ELSIF NR>1 THEN
            dbms_output.put_line('Exista mai multi angajati');
        ELSE  
            UPDATE employees                                --150
            SET salary = salariu_nou
            WHERE first_name = nume; 
        END IF;
    END salariu_actualizare;
    PROCEDURE afisare IS
    nr_joburi number;
    BEGIN 
        FOR i IN pachet1.lista_joburi LOOP                          --160
            DBMS_OUTPUT.PUT_LINE(i.job_title);
            FOR j IN pachet1.lista_angajati(i.job_id) LOOP 
            DBMS_OUTPUT.PUT_LINE(j.last_name || j.first_name); 
            END LOOP; 
        DBMS_OUTPUT.new_line;
        END LOOP;
    END afisare;
END pachet1;